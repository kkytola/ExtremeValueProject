/-
Copyright (c) 2025 Kalle Kyt√∂l√§. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kalle Kyt√∂l√§, Okko Heini√∂ ...
-/
import Mathlib
import ExtremeValueProject.CumulativeDistributionFunction
import ExtremeValueProject.AffineTransformation

import ExtremeValueProject.WeakConvergenceCDF

section preliminaries_for_type_of_cdf

open Topology Filter

open scoped Topology


/-- Construct an orientation preserving affine isomorphism `x ‚Ü¶ a * x + b` of `‚Ñù` from
coefficients `a > 0` and `b ‚àà ‚Ñù`. -/
noncomputable def orientationPreservingAffineEquiv.mkOfCoefs {a : ‚Ñù} (a_pos : 0 < a) (b : ‚Ñù) :
    orientationPreservingAffineEquiv where
  val := AffineEquiv.mkOfCoefs_of_field a_pos.ne.symm b
  property := by
    change (AffineEquiv.mkOfCoefs_of_field a_pos.ne.symm b).IsOrientationPreserving
    rw [AffineEquiv.IsOrientationPreserving]
    convert a_pos
    simp

lemma orientationPreservingAffineEquiv.mkOfCoefs_apply {a : ‚Ñù} (a_pos : 0 < a) (b : ‚Ñù) (x : ‚Ñù) :
    (mkOfCoefs a_pos b).val x = a * x + b :=
  rfl

lemma orientationPreservingAffineEquiv.mkOfCoefs_val {a : ‚Ñù} (a_pos : 0 < a) (b : ‚Ñù) (x : ‚Ñù) :
    (mkOfCoefs a_pos b).val = AffineEquiv.mkOfCoefs_of_field a_pos.ne.symm b :=
  rfl

namespace CumulativeDistributionFunction

lemma exists‚ÇÇ_continuousAt_of_not_isDegenerate
    (F : CumulativeDistributionFunction) (hF : ¬¨ F.IsDegenerate) :
    ‚àÉ x‚ÇÅ x‚ÇÇ, (x‚ÇÅ < x‚ÇÇ) ‚àß (0 < F x‚ÇÅ) ‚àß (F x‚ÇÇ < 1) ‚àß (ContinuousAt F x‚ÇÅ) ‚àß (ContinuousAt F x‚ÇÇ) := by
  sorry -- **Issue #38**

lemma unique_orientationPreservingAffineEquiv_smul_eq_not_isDegenerate
    {F G : CumulativeDistributionFunction} {A‚ÇÅ A‚ÇÇ : AffineIncrEquiv}
    (hG : ¬¨ G.IsDegenerate) (h‚ÇÅ : A‚ÇÅ ‚Ä¢ F = G) (h‚ÇÇ : A‚ÇÇ ‚Ä¢ F = G) :
    A‚ÇÅ = A‚ÇÇ := by
  sorry -- **Issue #39**

open AffineIncrEquiv in
/-- If we have c.d.f. convergence `F‚Çô ‚Üí G` and `A‚Çô ‚Ä¢ F‚Çô ‚Üí G'`, where `A‚Çô(x) = a‚Çô * x + b‚Çô`
with `a‚Çô ‚Üí 0` and `b‚Çô ‚Üí Œ≤`, then `G'(x) = 0` for all `x < Œ≤`. -/
lemma apply_eq_zero_of_tendsto_of_lt
    {F : ‚Ñï ‚Üí CumulativeDistributionFunction} {G G' : CumulativeDistributionFunction}
    {a : ‚Ñï ‚Üí ‚Ñù} (a_pos : ‚àÄ n, 0 < a n) {b : ‚Ñï ‚Üí ‚Ñù} {Œ≤ : ‚Ñù}
    (a_lim : Tendsto a atTop (ùìù 0)) (b_lim : Tendsto b atTop (ùìù Œ≤))
    (F_lim : ‚àÄ x, ContinuousAt G x ‚Üí Tendsto (fun n ‚Ü¶ F n x) atTop (ùìù (G x)))
    (F_lim' : ‚àÄ x, ContinuousAt G' x ‚Üí
      Tendsto (fun n ‚Ü¶ ((mkOfCoefs (a_pos n) (b n)) ‚Ä¢ (F n)) x) atTop (ùìù (G' x)))
    {x : ‚Ñù} (x_lt : x < Œ≤) :
    G' x = 0 := by
  sorry

open AffineIncrEquiv Set Countable Monotone in
/-- If we have c.d.f. convergence `F‚Çô ‚Üí G` and `A‚Çô ‚Ä¢ F‚Çô ‚Üí G'`, where `A‚Çô(x) = a‚Çô * x + b‚Çô`
with `a‚Çô ‚Üí 0` and `b‚Çô ‚Üí Œ≤`, then `G'(x) = 1` for all `x > Œ≤`. -/
lemma apply_eq_one_of_tendsto_of_gt
    {F : ‚Ñï ‚Üí CumulativeDistributionFunction} {G G' : CumulativeDistributionFunction}
    {a : ‚Ñï ‚Üí ‚Ñù} (a_pos : ‚àÄ n, 0 < a n) {b : ‚Ñï ‚Üí ‚Ñù} {Œ≤ : ‚Ñù}
    (a_lim : Tendsto a atTop (ùìù 0)) (b_lim : Tendsto b atTop (ùìù Œ≤))
    (F_lim : ‚àÄ x, ContinuousAt G x ‚Üí Tendsto (fun n ‚Ü¶ F n x) atTop (ùìù (G x)))
    (F_lim' : ‚àÄ x, ContinuousAt G' x ‚Üí
      Tendsto (fun n ‚Ü¶ ((mkOfCoefs (a_pos n) (b n)) ‚Ä¢ (F n)) x) atTop (ùìù (G' x)))
    {x : ‚Ñù} (x_gt : Œ≤ < x) :
    G' x = 1 := by
  have (Œµ : ‚Ñù) (Œµ_pos : Œµ > 0) : G' x > 1 - Œµ := by

    have dense_cont_pts (H : CumulativeDistributionFunction) : Dense {x | ContinuousAt H x} := by
      simpa [compl] using dense_compl (ùïú := ‚Ñù) (countable_not_continuousAt H.mono')

    -- Choose `x'` s.t. `Œ≤ < x' < x` and `G'` is continuous at `x'`
    obtain ‚ü®x', ‚ü®x'_gt, x'_lt‚ü©, x'_cont‚ü© :=
      (dense_cont_pts G').inter_open_nonempty (Ioo Œ≤ x) isOpen_Ioo (nonempty_Ioo.mpr x_gt)
    simp only [mem_setOf_eq] at x'_cont

    -- Choose `z'` s.t. `G(z') > 1 - Œµ'` where `Œµ' := Œµ/2`
    set Œµ' := Œµ/2 with hŒµ'
    have Gz'_ev_gt : ‚àÄ·∂† z' in atTop, 1 - Œµ' < G z' := by
      filter_upwards
        [G.tendsto_atTop (show Ioi (1-Œµ') ‚àà ùìù 1 from Ioi_mem_nhds (by linarith))]
        with z' hz' using hz'
    obtain ‚ü®z', hz'‚ü© := Gz'_ev_gt.exists

    -- Choose `z` s.t. `G(z) > 1 - Œµ'` and `G` is continuous at `z`
    obtain ‚ü®z, z_gt, z_cont‚ü© :=
      (dense_cont_pts G).inter_open_nonempty {z | z' < z} isOpen_Ioi nonempty_Ioi
    simp only [mem_setOf_eq] at z_gt z_cont
    have Gz_gt : 1 - Œµ' < G z := hz'.trans_le <| G.mono (by linarith)

    -- `A‚Çô(z) ‚Üí Œ≤`
    have : Tendsto (Œª n ‚Ü¶ a n * z) atTop (ùìù (0 * z)) := a_lim.mul_const z
    simp only [zero_mul] at this
    have A_lim : Tendsto (Œª n ‚Ü¶ a n * z + b n) atTop (ùìù (0 + Œ≤)) := this.add b_lim
    simp only [zero_add] at A_lim

    -- `A‚Çô(z) < x'` for large `n`
    have Anz_ev_lt : ‚àÄ·∂† n in atTop, a n * z + b n < x' := by
      filter_upwards [A_lim (Iio_mem_nhds x'_gt)] with n hn using hn

    -- `1 - Œµ' < F‚Çô(z)` for large `n`
    have Fnz_ev_gt : ‚àÄ·∂† n in atTop, 1 - Œµ' < F n z := by
      filter_upwards [F_lim z z_cont (Ioi_mem_nhds Gz_gt)] with n hn using hn

    -- Shorthand `F‚Çô' = A‚Çô.F‚Çô`
    set F' : ‚Ñï ‚Üí CumulativeDistributionFunction :=
      fun n ‚Ü¶ (mkOfCoefs (a_pos n) (b n)) ‚Ä¢ (F n) with hF'

    -- Assume the opposite to get `F‚Çô'(x') < 1 - Œµ'` for large `n`
    by_contra con
    have F'nx'_ev_gt : ‚àÄ·∂† n in atTop, F' n x' < 1 - Œµ' := by
      filter_upwards
        [F_lim' x' x'_cont (Iio_mem_nhds (show G' x' < 1 - Œµ' by linarith [G'.mono x'_lt.le]))]
        with n hn using hn

    obtain ‚ü®n, ‚ü®hn‚ÇÅ, hn‚ÇÇ‚ü©, hn‚ÇÉ‚ü© := ((Fnz_ev_gt.and Anz_ev_lt).and F'nx'_ev_gt).exists

    -- Contradiction `1 - Œµ' < F‚Çô(z) ‚â§ F‚Çô'(x') < 1 - Œµ'`
    have := calc
      (F n) z = F' n (a n * z + b n) := by
        rw [‚Üê mulAction_apply_eq_self_apply (F n) (mkOfCoefs (a_pos n) (b n))]
        rfl
      _ ‚â§ F' n x' := (F' n).mono' (by linarith)
    linarith

  have : G' x ‚â• 1 := by
    by_contra
    linarith [this ((1 - G' x) / 2) (by linarith)]
  linarith [apply_le_one G' x]

open AffineIncrEquiv in
/-- If we have c.d.f. convergence `F‚Çô ‚Üí G` and `A‚Çô ‚Ä¢ F‚Çô ‚Üí G'`, where `A‚Çô(x) = a‚Çô * x + b‚Çô`
with `a‚Çô ‚Üí 0` and `b‚Çô ‚Üí Œ≤`, then `G'` is degenerate (a delta mass at `Œ≤`). -/
lemma isDegenerate_of_tendsto_shrinking
    {F : ‚Ñï ‚Üí CumulativeDistributionFunction} {G G' : CumulativeDistributionFunction}
    {a : ‚Ñï ‚Üí ‚Ñù} (a_pos : ‚àÄ n, 0 < a n) {b : ‚Ñï ‚Üí ‚Ñù} {Œ≤ : ‚Ñù}
    (a_lim : Tendsto a atTop (ùìù 0)) (b_lim : Tendsto b atTop (ùìù Œ≤))
    (F_lim : ‚àÄ x, ContinuousAt G x ‚Üí Tendsto (fun n ‚Ü¶ F n x) atTop (ùìù (G x)))
    (F_lim' : ‚àÄ x, ContinuousAt G' x ‚Üí
      Tendsto (fun n ‚Ü¶ ((mkOfCoefs (a_pos n) (b n)) ‚Ä¢ (F n)) x) atTop (ùìù (G' x))) :
    G'.IsDegenerate := by
  rw [isDegenerate_iff]
  use Œ≤
  suffices (‚àÄ x < Œ≤, G' x = 0) ‚àß (‚àÄ x > Œ≤, G' x = 1) by
    funext x
    by_cases x_lt : x < Œ≤
    ¬∑ have obs : ¬¨ x ‚àà Set.Ici Œ≤ := by simpa using x_lt
      simp [obs, this.1 _ x_lt]
    ¬∑ have obs : x ‚àà Set.Ici Œ≤ := by simpa using x_lt
      by_cases x_eq : x = Œ≤
      ¬∑ simp only [obs, Set.indicator_of_mem]
        have key := G'.right_continuous
        have key' : ContinuousWithinAt G' (Set.Ioi Œ≤) Œ≤ := continuousWithinAt_Ioi_iff_Ici.mpr (key Œ≤)
        have aux : ‚àÄ·∂† x in (ùìù[>] Œ≤), G' x = 1 := by
          filter_upwards [self_mem_nhdsWithin] with x hx using this.2 _ hx
        have wow := Tendsto.congr' aux key'
        rw [tendsto_const_nhds_iff] at wow
        rw [x_eq, wow]
      have x_gt : Œ≤ < x := lt_of_le_of_ne (le_of_not_lt x_lt) ((Ne.eq_def _ _).symm ‚ñ∏ x_eq).symm
      simp [obs, this.2 _ x_gt]
  refine ‚ü®?_, ?_‚ü©
  ¬∑ intro x hx
    exact apply_eq_zero_of_tendsto_of_lt a_pos a_lim b_lim F_lim F_lim' hx
  ¬∑ intro x hx
    exact apply_eq_one_of_tendsto_of_gt a_pos a_lim b_lim F_lim F_lim' hx

open orientationPreservingAffineEquiv in
/-- If we have c.d.f. convergence `F‚Çô ‚Üí G` where `G` is nondegenerate and if `A‚Çô`
is a sequence of oriented affine isomorphisms with scaling coefficients `a‚Çô ‚Üí +‚àû`,
then `A‚Çô ‚Ä¢ F‚Çô` cannot converge to any c.d.f. -/
lemma not_tendsto_cdf_of_expanding_of_tendsto_not_isDegenerate
    {F : ‚Ñï ‚Üí CumulativeDistributionFunction} {G G' : CumulativeDistributionFunction}
    (F_lim : ‚àÄ x, ContinuousAt G x ‚Üí Tendsto (fun n ‚Ü¶ F n x) atTop (ùìù (G x)))
    (hG : ¬¨ G.IsDegenerate) {A : ‚Ñï ‚Üí AffineIncrEquiv}
    (a_lim : Tendsto (fun n ‚Ü¶ (A n).val.toAffineMap.coefs_of_field.1) atTop atTop) :
    ¬¨ ‚àÄ x, ContinuousAt G' x ‚Üí Tendsto (fun n ‚Ü¶ ((A n) ‚Ä¢ (F n)) x) atTop (ùìù (G' x)) := by
  intro nottrue
  have ‚ü®x1,x2,x1_lt_x2,Gx1_pos,Gx2_bound,x1_cont,x2_cont‚ü©:=
    CumulativeDistributionFunction.exists‚ÇÇ_continuousAt_of_not_isDegenerate _ hG
  have right_tendsto {z : ‚Ñù} (z_spec_cont : ContinuousAt G' z) {s : ‚Ñï ‚Üí ‚Ñï}
      (s_atTop : Tendsto s atTop atTop) :
      Tendsto (fun k ‚Ü¶ (A (s k) ‚Ä¢ F (s k)) z) atTop (ùìù (G' z))  :=
    (nottrue z z_spec_cont).comp s_atTop
  have left_tendsto {x1 : ‚Ñù} (x1_cont : ContinuousAt G x1) {s : ‚Ñï ‚Üí ‚Ñï}
      (s_atTop : Tendsto s atTop atTop) :
      Tendsto (fun k ‚Ü¶ F (s k) x1) atTop (ùìù (G x1)) :=
    (F_lim _ x1_cont).comp s_atTop
  -- the names `lt` and `min` have lost their meaning.
  have not_bounded_after' {B : ‚Ñï ‚Üí ‚Ñù} {lt : ‚Ñù ‚Üí ‚Ñù ‚Üí Prop} {min : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù}
      (not_bounded : ‚àÄz, ‚àÉ x, lt (B x) z )
      (min_spec : ‚àÄ ‚¶Éa b c‚¶Ñ, lt a (min b c) ‚Üí a ‚â† b ‚àß lt a c)
      (z) (t) : ‚àÉ x ‚â• t, lt (B x) z := by
    induction t generalizing z with
    | zero =>
      simp only [ge_iff_le, zero_le, true_and]
      exact not_bounded z
    | succ t prev =>
      -- `prev (min (B t) z)` ensures that `y ‚â† t`, using `B y < B t`
      have ‚ü®y, y_gt_t, y_spec‚ü© := prev (min (B t) z)
      apply min_spec at y_spec
      have yyt : t ‚â† y := by
        intro con
        exact (con ‚ñ∏  y_spec.left) rfl
      refine ‚ü®y, Nat.lt_iff_add_one_le.mp (Nat.lt_of_le_of_ne y_gt_t yyt), y_spec.right‚ü©
  have ‚ü®below,claim_below‚ü© : ‚àÉ below, ‚àÄ n, A n x1 > below := by
    by_contra! not_bounded
    have not_bounded_after := not_bounded_after' not_bounded
      (lt := (¬∑ ‚â§ ¬∑)) (min := (fun a b ‚Ü¶ min (a - 1) b))
      (by intro a b c abc ; constructor <;> linarith [le_inf_iff.mp abc] )
    obtain ‚ü®z, _, _, z_spec_lt, _, z_spec_cont, _‚ü© := G'.forall_pos_exists_lt_gt_continuousAt Gx1_pos
    have ‚ü®(s : ‚Ñï ‚Üí ‚Ñï), (s_atTop : Tendsto s atTop atTop), (s_spec : ‚àÄ (n : ‚Ñï), A (s n) x1 ‚â§ z)‚ü©
      := subseq_forall_of_frequently tendsto_id (frequently_atTop.mpr (not_bounded_after z))
    have ineq (k) : F (s k) x1 ‚â§ (A (s k) ‚Ä¢ F (s k)) z := by
      rw [‚ÜêmulAction_apply_eq_self_apply (F (s k)) (A (s k)) x1]
      set qf := A (s k) ‚Ä¢ F (s k)
      exact (qf.mono) (s_spec k)
    exact (tendsto_le_of_eventuallyLE (left_tendsto x1_cont s_atTop)
      (right_tendsto z_spec_cont s_atTop) (Eventually.of_forall ineq)).not_lt z_spec_lt
  have ‚ü®above,claim_above‚ü© : ‚àÉ above, ‚àÄ n, A n x2 < above := by
    by_contra not_bounded
    simp only [not_exists, not_forall, not_lt] at not_bounded
    have not_bounded_after := not_bounded_after' not_bounded
      (lt := (¬∑ ‚â• ¬∑)) (min := (fun a b ‚Ü¶ max (a + 1) b))
      (by intro a b c abc ; constructor <;> linarith [sup_le_iff.mp abc])
    have ‚ü®z,z_spec_cont,z_spec_lt‚ü© : ‚àÉz, ContinuousAt G' z ‚àß G' z > G x2 := by
      have Gx2_pos' : 0 < 1 - (G x2) := by linarith [Gx1_pos, G.mono x1_lt_x2.le]
      have ‚ü®_,w,_,_,w_lt,_,w_cont‚ü©:= G'.forall_pos_exists_lt_gt_continuousAt Gx2_pos'
      simp only [sub_sub_cancel] at w_lt
      use w
    have ‚ü®(s : ‚Ñï ‚Üí ‚Ñï), (s_atTop : Tendsto s atTop atTop), (s_spec : ‚àÄ (n : ‚Ñï), A (s n) x2 ‚â• z)‚ü©
      := subseq_forall_of_frequently tendsto_id (frequently_atTop.mpr (not_bounded_after z))
    have ineq (k) : F (s k) x2 ‚â• (A (s k) ‚Ä¢ F (s k)) z := by
      rw [‚ÜêmulAction_apply_eq_self_apply (F (s k)) (A (s k)) x2]
      exact (A (s k) ‚Ä¢ F (s k)).mono (s_spec k)
    exact (tendsto_le_of_eventuallyLE (right_tendsto z_spec_cont s_atTop)
      (left_tendsto x2_cont s_atTop) (Eventually.of_forall ineq)).not_lt z_spec_lt
  set a := fun n ‚Ü¶ (A n).val.toAffineMap.coefs_of_field.1
  have ‚ü®an_above, an_claim_above‚ü© : ‚àÉ a_above, ‚àÄ n, a n < a_above := by
    use (above - below) / (x2 - x1)
    intro n
    have x2x1_positive : 0 < x2 - x1 := by linarith
    have an_value (n) : a n = (A n x2 - A n x1) / (x2 - x1) := by
      field_simp [‚Üêmul_sub_left_distrib] ; rfl
    have aux : ((A n) x2 - (A n) x1) < (above - below) := by
      linarith only [claim_below n, claim_above n]
    simpa [an_value n] using (div_lt_div_iff_of_pos_right x2x1_positive).mpr aux
  clear * - a_lim an_claim_above
  have impossible : ‚àÄ·∂† n in atTop, a n ‚àà Set.Ioi an_above := a_lim (Ioi_mem_atTop an_above)
  obtain ‚ü®m, (hm : an_above < a m)‚ü© := impossible.exists
  apply lt_irrefl _ <| (an_claim_above m).trans hm


end CumulativeDistributionFunction

end preliminaries_for_type_of_cdf


section type_of_cdf

end type_of_cdf
