/-
Copyright (c) 2025 Kalle Kyt√∂l√§. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kalle Kyt√∂l√§, ...
-/
import Mathlib
import ExtremeValueProject.CumulativeDistributionFunction
import ExtremeValueProject.AffineTransformation


section preliminaries_for_type_of_cdf

open Topology Filter

open scoped Topology


/-- Construct an orientation preserving affine isomorphism `x ‚Ü¶ a * x + b` of `‚Ñù` from
coefficients `a > 0` and `b ‚àà ‚Ñù`. -/
noncomputable def orientationPreservingAffineEquiv.mkOfCoefs {a : ‚Ñù} (a_pos : 0 < a) (b : ‚Ñù) :
    orientationPreservingAffineEquiv where
  val := AffineEquiv.mkOfCoefs_of_field a_pos.ne.symm b
  property := by
    change (AffineEquiv.mkOfCoefs_of_field a_pos.ne.symm b).IsOrientationPreserving
    rw [AffineEquiv.IsOrientationPreserving]
    convert a_pos
    simp

lemma orientationPreservingAffineEquiv.mkOfCoefs_apply {a : ‚Ñù} (a_pos : 0 < a) (b : ‚Ñù) (x : ‚Ñù) :
    (mkOfCoefs a_pos b).val x = a * x + b :=
  rfl

lemma orientationPreservingAffineEquiv.mkOfCoefs_val {a : ‚Ñù} (a_pos : 0 < a) (b : ‚Ñù) (x : ‚Ñù) :
    (mkOfCoefs a_pos b).val = AffineEquiv.mkOfCoefs_of_field a_pos.ne.symm b :=
  rfl

namespace CumulativeDistributionFunction

lemma exists‚ÇÇ_continuousAt_of_not_isDegenerate
    (F : CumulativeDistributionFunction) (hF : ¬¨ F.IsDegenerate) :
    ‚àÉ x‚ÇÅ x‚ÇÇ, (x‚ÇÅ < x‚ÇÇ) ‚àß (0 < F x‚ÇÅ) ‚àß (F x‚ÇÇ < 1) ‚àß (ContinuousAt F x‚ÇÅ) ‚àß (ContinuousAt F x‚ÇÇ) := by
  sorry -- **Issue #38**

lemma unique_orientationPreservingAffineEquiv_smul_eq_not_isDegenerate
    {F G : CumulativeDistributionFunction} {A‚ÇÅ A‚ÇÇ : AffineIncrEquiv}
    (hG : ¬¨ G.IsDegenerate) (h‚ÇÅ : A‚ÇÅ ‚Ä¢ F = G) (h‚ÇÇ : A‚ÇÇ ‚Ä¢ F = G) :
    A‚ÇÅ = A‚ÇÇ := by
  sorry -- **Issue #39**

open AffineIncrEquiv in
/-- If we have c.d.f. convergence `F‚Çô ‚Üí G` and `A‚Çô ‚Ä¢ F‚Çô ‚Üí G'`, where `A‚Çô(x) = a‚Çô * x + b‚Çô`
with `a‚Çô ‚Üí 0` and `b‚Çô ‚Üí Œ≤`, then `G'(x) = 0` for all `x < Œ≤`. -/
lemma apply_eq_zero_of_tendsto_of_lt
    {F : ‚Ñï ‚Üí CumulativeDistributionFunction} {G G' : CumulativeDistributionFunction}
    {a : ‚Ñï ‚Üí ‚Ñù} (a_pos : ‚àÄ n, 0 < a n) {b : ‚Ñï ‚Üí ‚Ñù} {Œ≤ : ‚Ñù}
    (a_lim : Tendsto a atTop (ùìù 0)) (b_lim : Tendsto b atTop (ùìù Œ≤))
    (F_lim : ‚àÄ x, ContinuousAt G x ‚Üí Tendsto (fun n ‚Ü¶ F n x) atTop (ùìù (G x)))
    (F_lim' : ‚àÄ x, ContinuousAt G' x ‚Üí
      Tendsto (fun n ‚Ü¶ ((mkOfCoefs (a_pos n) (b n)) ‚Ä¢ (F n)) x) atTop (ùìù (G' x)))
    {x : ‚Ñù} (x_lt : x < Œ≤) :
    G x = 0 := by
  sorry

open AffineIncrEquiv in
/-- If we have c.d.f. convergence `F‚Çô ‚Üí G` and `A‚Çô ‚Ä¢ F‚Çô ‚Üí G'`, where `A‚Çô(x) = a‚Çô * x + b‚Çô`
with `a‚Çô ‚Üí 0` and `b‚Çô ‚Üí Œ≤`, then `G'(x) = 1` for all `x > Œ≤`. -/
lemma apply_eq_one_of_tendsto_of_gt
    {F : ‚Ñï ‚Üí CumulativeDistributionFunction} {G G' : CumulativeDistributionFunction}
    {a : ‚Ñï ‚Üí ‚Ñù} (a_pos : ‚àÄ n, 0 < a n) {b : ‚Ñï ‚Üí ‚Ñù} {Œ≤ : ‚Ñù}
    (a_lim : Tendsto a atTop (ùìù 0)) (b_lim : Tendsto b atTop (ùìù Œ≤))
    (F_lim : ‚àÄ x, ContinuousAt G x ‚Üí Tendsto (fun n ‚Ü¶ F n x) atTop (ùìù (G x)))
    (F_lim' : ‚àÄ x, ContinuousAt G' x ‚Üí
      Tendsto (fun n ‚Ü¶ ((mkOfCoefs (a_pos n) (b n)) ‚Ä¢ (F n)) x) atTop (ùìù (G' x)))
    {x : ‚Ñù} (x_gt : Œ≤ < x) :
    G x = 1 := by
  sorry

open AffineIncrEquiv in
/-- If we have c.d.f. convergence `F‚Çô ‚Üí G` and `A‚Çô ‚Ä¢ F‚Çô ‚Üí G'`, where `A‚Çô(x) = a‚Çô * x + b‚Çô`
with `a‚Çô ‚Üí 0` and `b‚Çô ‚Üí Œ≤`, then `G'` is degenerate (a delta mass at `Œ≤`). -/
lemma isDegenerate_of_tendsto_shrinking
    {F : ‚Ñï ‚Üí CumulativeDistributionFunction} {G G' : CumulativeDistributionFunction}
    {a : ‚Ñï ‚Üí ‚Ñù} (a_pos : ‚àÄ n, 0 < a n) {b : ‚Ñï ‚Üí ‚Ñù} {Œ≤ : ‚Ñù}
    (a_lim : Tendsto a atTop (ùìù 0)) (b_lim : Tendsto b atTop (ùìù Œ≤))
    (F_lim : ‚àÄ x, ContinuousAt G x ‚Üí Tendsto (fun n ‚Ü¶ F n x) atTop (ùìù (G x)))
    (F_lim' : ‚àÄ x, ContinuousAt G' x ‚Üí
      Tendsto (fun n ‚Ü¶ ((mkOfCoefs (a_pos n) (b n)) ‚Ä¢ (F n)) x) atTop (ùìù (G' x))) :
    G.IsDegenerate := by
  rw [isDegenerate_iff]
  use Œ≤
  suffices (‚àÄ x < Œ≤, G x = 0) ‚àß (‚àÄ x > Œ≤, G x = 1) by
    funext x
    by_cases x_lt : x < Œ≤
    ¬∑ have obs : ¬¨ x ‚àà Set.Ici Œ≤ := by simpa using x_lt
      simp [obs, this.1 _ x_lt]
    ¬∑ have obs : x ‚àà Set.Ici Œ≤ := by simpa using x_lt
      by_cases x_eq : x = Œ≤
      ¬∑ simp only [obs, Set.indicator_of_mem]
        have key := G.right_continuous
        have key' : ContinuousWithinAt G (Set.Ioi Œ≤) Œ≤ := continuousWithinAt_Ioi_iff_Ici.mpr (key Œ≤)
        have aux : ‚àÄ·∂† x in (ùìù[>] Œ≤), G x = 1 := by
          filter_upwards [self_mem_nhdsWithin] with x hx using this.2 _ hx
        have wow := Tendsto.congr' aux key'
        rw [tendsto_const_nhds_iff] at wow
        rw [x_eq, wow]
      have x_gt : Œ≤ < x := lt_of_le_of_ne (le_of_not_lt x_lt) ((Ne.eq_def _ _).symm ‚ñ∏ x_eq).symm
      simp [obs, this.2 _ x_gt]
  refine ‚ü®?_, ?_‚ü©
  ¬∑ intro x hx
    exact apply_eq_zero_of_tendsto_of_lt a_pos a_lim b_lim F_lim F_lim' hx
  ¬∑ intro x hx
    exact apply_eq_one_of_tendsto_of_gt a_pos a_lim b_lim F_lim F_lim' hx

open orientationPreservingAffineEquiv in
/-- If we have c.d.f. convergence `F‚Çô ‚Üí G` where `G` is nondegenerate and if `A‚Çô`
is a sequence of oriented affine isomorphisms with scaling coefficients `a‚Çô ‚Üí +‚àû`,
then `A‚Çô ‚Ä¢ F‚Çô` cannot converge to any c.d.f. -/
lemma not_tendsto_cdf_of_expanding_of_tendsto_not_isDegenerate
    {F : ‚Ñï ‚Üí CumulativeDistributionFunction} {G G' : CumulativeDistributionFunction}
    (F_lim : ‚àÄ x, ContinuousAt G x ‚Üí Tendsto (fun n ‚Ü¶ F n x) atTop (ùìù (G x)))
    (hG : ¬¨ G.IsDegenerate) {A : ‚Ñï ‚Üí AffineIncrEquiv}
    (a_lim : Tendsto (fun n ‚Ü¶ (A n).val.toAffineMap.coefs_of_field.1) atTop atTop) :
    ¬¨ ‚àÄ x, ContinuousAt G' x ‚Üí Tendsto (fun n ‚Ü¶ ((A n) ‚Ä¢ (F n)) x) atTop (ùìù (G' x)) := by
  -- at all continuity points x of G, Fn tends to G as n grows


  -- notes: if the affine sequence inverses have the offset grow faster than the multiplier,
  -- then as n increases, the halfway point is moved further left of right,
  --   and all positions tend to the same bound as n increases.
  -- wait, nevermind...

  -- it seems to flatten out.

  intro nottrue
  -- needs: all CDF have some continuity points.
  --
  have ‚ü®x1,x2,x1_lt_x2,Gx1_pos,Gx2_bound,x1_cont,x2_cont‚ü©:= CumulativeDistributionFunction.exists‚ÇÇ_continuousAt_of_not_isDegenerate _ hG

  have x1_tendsto:= F_lim _ x1_cont
  --
  --special case
  -- by_cases test : F = fun n ‚Ü¶ G
  -- ¬∑
  --   by_cases test2 : A = fun (n : ‚Ñï) ‚Ü¶ AffineIncrEquiv.mkOfCoefs (?_ : (n : ‚Ñù) + 1 > 0) 0
  --   ¬∑ sorry
  --   ¬∑
  --     simp at nottrue
  --     simp_all only [test,test2]
  --     simp_all
  --     sorry
  --   sorry

  have ‚ü®below,claim_below‚ü© : ‚àÉ below, ‚àÄ n, A n x1 > below := by
    have ‚ü®z,z_spec_cont,z_spec_lt‚ü© : ‚àÉz, ContinuousAt G' z ‚àß G' z < G x1 := sorry
    have z_converge:= nottrue z z_spec_cont
    by_contra not_bounded
    simp [-AffineIncrEquiv.apply_eq] at not_bounded


    set B := (A ¬∑ x1)

    -- have not_z_bounded :=
    have not_bounded' (y) : ‚àÉ x, B x < y := by
      have ‚ü®x,x_spec‚ü© := not_bounded (y - 1)
      use x
      linarith
    have not_bounded_after (t) : ‚àÉ x > t, B x < z := by
      have ‚ü®init,init_spec‚ü© := not_bounded' z
      by_cases h : init > t
      ¬∑ use init, h
      simp at h
      let qq := ‚®Ö i ‚â§ t, B i
      have : qq ‚â§ B init := by
        unfold qq
        sorry


      -- have ‚ü®succ,succ_spec‚ü© := not_bounded ((A init) x1 - 1)
      have gen: ‚àÄn, ‚àÉy > n, B y ‚â§ B n := by
        intro n
        have ‚ü®succ,succ_spec‚ü© := not_bounded (B n)
        use succ
        sorry

      sorry

    -- (n‚Çñ)_(k‚àà‚Ñï)
    -- have ‚ü®s,s_increasing,s_spec‚ü© : ‚àÉ s : ‚Ñï ‚Üí ‚Ñï, StrictMono s ‚àß ‚àÄ k, A (s k) x1 < z := by
    --   have ‚ü®init,init_spec‚ü© := not_bounded (z - 1)
    --   -- have ‚ü®succ,succ_spec‚ü© := not_bounded ((A init) x1 - 1)
    --   have gen: ‚àÄn, ‚àÉy > n, (A y) x1 ‚â§ (A n) x1 := by
    --     intro n
    --     have ‚ü®succ,succ_spec‚ü© := not_bounded ((A n) x1)
    --     use succ

    --     sorry


    --   -- let rec ff(n) : ‚Ñï := match n with
    --   --   | 0 => init
    --   --   | n+1 => (gen (ff n)).choose


    --   sorry
    -- #check subseq_tendsto_of_neBot
    have id_top : Tendsto (id : ‚Ñï ‚Üí ‚Ñï) atTop atTop := by exact fun ‚¶ÉU‚¶Ñ a => a
    have key: ‚àÉ·∂† (n : ‚Ñï) in atTop, (fun k => B k < z) (id n) := by
      simp [-AffineIncrEquiv.apply_eq]
      refine Nat.frequently_atTop_iff_infinite.mpr ?_


      sorry
      -- exact frequently_atTop'.mpr not_bounded_after

    -- #check subseq_forall_of_frequently
    have ‚ü®s,s_atTop,s_spec‚ü© := subseq_forall_of_frequently (p := (fun k ‚Ü¶ B k < z)) id_top key


    -- have s_atTop : Filter.map s atTop ‚â§ atTop := by
    --   exact s_increasing.tendsto_atTop
      -- #check tendsto_atTop_atTop_of_monotone
      -- refine tendsto_atTop_mono (f := id) (g := s) (l:= atTop) ?_ ?_
      -- ¬∑ intro n
      --   simp only [id_eq]
      --   unfold StrictMono at s_increasing
      --   induction' n with n prev
      --   ¬∑
      --     simp only [zero_le]
      --   ¬∑

      --     sorry


    have ineq(k): F (s k) x1 ‚â§ (A (s k) ‚Ä¢ F (s k)) z := by
      have in_other_words : F (s k) x1 = (A (s k) ‚Ä¢ F (s k)) (A (s k) x1) := by
        simp only [mulAction_apply_eq]
        set w := (A (s k))‚Åª¬π ((A (s k)) x1) with w_def
        set q := A (s k)
        have w_eq_x1: w = x1 := by
          rw [w_def]
          simp
          ring_nf
          have q_pos: q.coefs.1 ‚â† 0 := by exact (AffineIncrEquiv.coefs_fst_pos q).ne'
          rw [CommGroupWithZero.mul_inv_cancel q.coefs.1 q_pos]
          exact one_mul x1
        rw [w_eq_x1]

      rw [in_other_words]
      set qf := A (s k) ‚Ä¢ F (s k)
      exact (qf.mono) (s_spec k).le

    have left_tendsto : Tendsto (fun k ‚Ü¶ F (s k) x1) atTop (ùìù (G x1)) := by
      -- #check x1_tendsto
      have : Filter.map ((fun n ‚Ü¶ F n x1) ‚àò s) atTop ‚â§ Filter.map (fun n ‚Ü¶ F (n) x1) atTop := by
        rw [‚ÜêFilter.map_map]
        rw [le_def]
        set q := map s atTop
        intro x lx
        exact s_atTop lx

      unfold Tendsto
      trans
      ¬∑ exact this
      ¬∑ exact x1_tendsto

    have right_tendsto : Tendsto (fun k ‚Ü¶ (A (s k) ‚Ä¢ F (s k)) z) atTop (ùìù (G' z)) := by
      change Tendsto ((fun n ‚Ü¶ (A n ‚Ä¢ F n) z) ‚àò s) atTop (ùìù (G' z))
      unfold Tendsto at z_converge ‚ä¢
      refine le_trans ?_ z_converge
      rw [‚ÜêFilter.map_map]
      rw [le_def]
      set q := map s atTop
      intro x lx
      exact s_atTop lx
    -- #check tendsto_le_of_eventuallyLE
    have := tendsto_le_of_eventuallyLE left_tendsto right_tendsto ?_
    exact this.not_lt z_spec_lt
    clear * - ineq
    unfold EventuallyLE
    simp only [ineq]
    simp





  have ‚ü®above,claim_above‚ü© : ‚àÉ above, ‚àÄ n, A n x2 < above := sorry
  have an_value (n) : (A n).val.toAffineMap.coefs_of_field.1 = (A n x2 - A n x1) / (x2 - x1) :=
    by
    simp
    rw [‚Üêmul_sub_left_distrib]
    set x2x1 := x2 - x1
    have x2x1_nonzero: x2x1 ‚â† 0 := by
      rw [ne_eq]
      rw [sub_eq_zero]
      exact x1_lt_x2.ne'
    simp [x2x1_nonzero]
    rfl
  have ‚ü®an_above,an_claim_above‚ü© : ‚àÉ a_above, ‚àÄ n, ((A n).val.toAffineMap.coefs_of_field.1) < a_above :=
    by
    simp_rw [an_value]
    set x2x1 := x2 - x1
    have x2x1_positive: 0 < x2x1 := by
      unfold x2x1
      norm_num
      exact x1_lt_x2
    use (above - below) / x2x1
    intro n
    suffices ((A n) x2 - (A n) x1) < (above - below) by
      exact (div_lt_div_iff_of_pos_right x2x1_positive).mpr this

    specialize claim_above n
    specialize claim_below n
    -- apply neg_lt_neg at claim_below
    linarith

  clear * - a_lim an_claim_above
  set W := fun n ‚Ü¶ ((A n)).val.toAffineMap.coefs_of_field.1
  -- simp_rw [] at an_claim_above
  change ‚àÄ (n : ‚Ñï), W n < an_above at an_claim_above

  have := Filter.tendsto_atTop'.mp a_lim
  -- simp at this
  revert this
  simp
  use (Set.Ioi an_above)
  simp
  constructor
  ¬∑ use an_above + 1
    intro _ _
    linarith
  intro x
  use x
  simp
  apply (an_claim_above x).le

  -- **Issue #40**

end CumulativeDistributionFunction

end preliminaries_for_type_of_cdf


section type_of_cdf

end type_of_cdf
